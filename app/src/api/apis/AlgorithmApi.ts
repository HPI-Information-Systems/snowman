/* tslint:disable */
/* eslint-disable */
/**
 * Snowman API
 * _This document describes the REST API of the snowman data matching benchmark tool._ Comparing data matching algorithms is still an unsolved topic in both industry and research. With snowman, developers and researchers will be able to compare the performance of different data matching solutions or improve new algorithms. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: snowman@groups.sap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Algorithm,
    AlgorithmFromJSON,
    AlgorithmToJSON,
    AlgorithmValues,
    AlgorithmValuesFromJSON,
    AlgorithmValuesToJSON,
} from '../models';

export interface AddAlgorithmRequest {
    algorithm: AlgorithmValues;
}

export interface DeleteAlgorithmRequest {
    algorithmId: number;
}

export interface GetAlgorithmRequest {
    algorithmId: number;
}

export interface SetAlgorithmRequest {
    algorithmId: number;
    algorithm: AlgorithmValues;
}

/**
 * 
 */
export class AlgorithmApi extends runtime.BaseAPI {

    /**
     * Creates a new algorithm
     */
    async addAlgorithmRaw(requestParameters: AddAlgorithmRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.algorithm === null || requestParameters.algorithm === undefined) {
            throw new runtime.RequiredError('algorithm','Required parameter requestParameters.algorithm was null or undefined when calling addAlgorithm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/algorithms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlgorithmValuesToJSON(requestParameters.algorithm),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Creates a new algorithm
     */
    async addAlgorithm(requestParameters: AddAlgorithmRequest): Promise<number> {
        const response = await this.addAlgorithmRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an algorithm by id
     */
    async deleteAlgorithmRaw(requestParameters: DeleteAlgorithmRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.algorithmId === null || requestParameters.algorithmId === undefined) {
            throw new runtime.RequiredError('algorithmId','Required parameter requestParameters.algorithmId was null or undefined when calling deleteAlgorithm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/algorithms/{algorithmId}`.replace(`{${"algorithmId"}}`, encodeURIComponent(String(requestParameters.algorithmId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an algorithm by id
     */
    async deleteAlgorithm(requestParameters: DeleteAlgorithmRequest): Promise<void> {
        await this.deleteAlgorithmRaw(requestParameters);
    }

    /**
     * Gets an algorithm by id
     */
    async getAlgorithmRaw(requestParameters: GetAlgorithmRequest): Promise<runtime.ApiResponse<Algorithm>> {
        if (requestParameters.algorithmId === null || requestParameters.algorithmId === undefined) {
            throw new runtime.RequiredError('algorithmId','Required parameter requestParameters.algorithmId was null or undefined when calling getAlgorithm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/algorithms/{algorithmId}`.replace(`{${"algorithmId"}}`, encodeURIComponent(String(requestParameters.algorithmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AlgorithmFromJSON(jsonValue));
    }

    /**
     * Gets an algorithm by id
     */
    async getAlgorithm(requestParameters: GetAlgorithmRequest): Promise<Algorithm> {
        const response = await this.getAlgorithmRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all algorithms
     */
    async getAlgorithmsRaw(): Promise<runtime.ApiResponse<Array<Algorithm>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/algorithms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlgorithmFromJSON));
    }

    /**
     * Get all algorithms
     */
    async getAlgorithms(): Promise<Array<Algorithm>> {
        const response = await this.getAlgorithmsRaw();
        return await response.value();
    }

    /**
     * Updates or creates an algorithm
     */
    async setAlgorithmRaw(requestParameters: SetAlgorithmRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.algorithmId === null || requestParameters.algorithmId === undefined) {
            throw new runtime.RequiredError('algorithmId','Required parameter requestParameters.algorithmId was null or undefined when calling setAlgorithm.');
        }

        if (requestParameters.algorithm === null || requestParameters.algorithm === undefined) {
            throw new runtime.RequiredError('algorithm','Required parameter requestParameters.algorithm was null or undefined when calling setAlgorithm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/algorithms/{algorithmId}`.replace(`{${"algorithmId"}}`, encodeURIComponent(String(requestParameters.algorithmId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AlgorithmValuesToJSON(requestParameters.algorithm),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates or creates an algorithm
     */
    async setAlgorithm(requestParameters: SetAlgorithmRequest): Promise<void> {
        await this.setAlgorithmRaw(requestParameters);
    }

}
