/* tslint:disable */
/* eslint-disable */
/**
 * Snowman API
 * _This document describes the REST API of the snowman data matching benchmark tool._ Comparing data matching algorithms is still an unsolved topic in both industry and research.  With snowman, developers and researchers will be able to compare the performance of different data matching  solutions or improve new algorithms. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: snowman@groups.sap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SimilarityThresholdFunction,
    SimilarityThresholdFunctionFromJSON,
    SimilarityThresholdFunctionToJSON,
    SimilarityThresholdFunctionValues,
    SimilarityThresholdFunctionValuesFromJSON,
    SimilarityThresholdFunctionValuesToJSON,
} from '../models';

export interface AddSimilarityThresholdFunctionRequest {
    experimentId: number;
    similarityThresholdFunction: SimilarityThresholdFunctionValues;
}

export interface DeleteSimilarityThresholdFunctionRequest {
    experimentId: number;
    functionId: number;
}

export interface GetSimilarityThresholdFunctionRequest {
    experimentId: number;
    functionId: number;
}

export interface GetSimilarityThresholdFunctionsRequest {
    experimentId: number;
}

export interface SetSimilarityThresholdFunctionRequest {
    experimentId: number;
    functionId: number;
    similarityThresholdFunction: SimilarityThresholdFunctionValues;
}

/**
 * 
 */
export class SimilarityThresholdsApi extends runtime.BaseAPI {

    /**
     * Creates a new similarity threshold function
     */
    async addSimilarityThresholdFunctionRaw(requestParameters: AddSimilarityThresholdFunctionRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.experimentId === null || requestParameters.experimentId === undefined) {
            throw new runtime.RequiredError('experimentId','Required parameter requestParameters.experimentId was null or undefined when calling addSimilarityThresholdFunction.');
        }

        if (requestParameters.similarityThresholdFunction === null || requestParameters.similarityThresholdFunction === undefined) {
            throw new runtime.RequiredError('similarityThresholdFunction','Required parameter requestParameters.similarityThresholdFunction was null or undefined when calling addSimilarityThresholdFunction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/experiments/{experimentId}/similarity-threshold-functions`.replace(`{${"experimentId"}}`, encodeURIComponent(String(requestParameters.experimentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SimilarityThresholdFunctionValuesToJSON(requestParameters.similarityThresholdFunction),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Creates a new similarity threshold function
     */
    async addSimilarityThresholdFunction(requestParameters: AddSimilarityThresholdFunctionRequest): Promise<number> {
        const response = await this.addSimilarityThresholdFunctionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a similarity threshold function
     */
    async deleteSimilarityThresholdFunctionRaw(requestParameters: DeleteSimilarityThresholdFunctionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.experimentId === null || requestParameters.experimentId === undefined) {
            throw new runtime.RequiredError('experimentId','Required parameter requestParameters.experimentId was null or undefined when calling deleteSimilarityThresholdFunction.');
        }

        if (requestParameters.functionId === null || requestParameters.functionId === undefined) {
            throw new runtime.RequiredError('functionId','Required parameter requestParameters.functionId was null or undefined when calling deleteSimilarityThresholdFunction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/experiments/{experimentId}/similarity-threshold-functions/{functionId}`.replace(`{${"experimentId"}}`, encodeURIComponent(String(requestParameters.experimentId))).replace(`{${"functionId"}}`, encodeURIComponent(String(requestParameters.functionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a similarity threshold function
     */
    async deleteSimilarityThresholdFunction(requestParameters: DeleteSimilarityThresholdFunctionRequest): Promise<void> {
        await this.deleteSimilarityThresholdFunctionRaw(requestParameters);
    }

    /**
     * Get a similarity threshold function
     */
    async getSimilarityThresholdFunctionRaw(requestParameters: GetSimilarityThresholdFunctionRequest): Promise<runtime.ApiResponse<SimilarityThresholdFunction>> {
        if (requestParameters.experimentId === null || requestParameters.experimentId === undefined) {
            throw new runtime.RequiredError('experimentId','Required parameter requestParameters.experimentId was null or undefined when calling getSimilarityThresholdFunction.');
        }

        if (requestParameters.functionId === null || requestParameters.functionId === undefined) {
            throw new runtime.RequiredError('functionId','Required parameter requestParameters.functionId was null or undefined when calling getSimilarityThresholdFunction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/experiments/{experimentId}/similarity-threshold-functions/{functionId}`.replace(`{${"experimentId"}}`, encodeURIComponent(String(requestParameters.experimentId))).replace(`{${"functionId"}}`, encodeURIComponent(String(requestParameters.functionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SimilarityThresholdFunctionFromJSON(jsonValue));
    }

    /**
     * Get a similarity threshold function
     */
    async getSimilarityThresholdFunction(requestParameters: GetSimilarityThresholdFunctionRequest): Promise<SimilarityThresholdFunction> {
        const response = await this.getSimilarityThresholdFunctionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all similarity threshold functions of an experiment
     */
    async getSimilarityThresholdFunctionsRaw(requestParameters: GetSimilarityThresholdFunctionsRequest): Promise<runtime.ApiResponse<Array<SimilarityThresholdFunction>>> {
        if (requestParameters.experimentId === null || requestParameters.experimentId === undefined) {
            throw new runtime.RequiredError('experimentId','Required parameter requestParameters.experimentId was null or undefined when calling getSimilarityThresholdFunctions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/experiments/{experimentId}/similarity-threshold-functions`.replace(`{${"experimentId"}}`, encodeURIComponent(String(requestParameters.experimentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SimilarityThresholdFunctionFromJSON));
    }

    /**
     * Get all similarity threshold functions of an experiment
     */
    async getSimilarityThresholdFunctions(requestParameters: GetSimilarityThresholdFunctionsRequest): Promise<Array<SimilarityThresholdFunction>> {
        const response = await this.getSimilarityThresholdFunctionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates or creates a similarity threshold function
     */
    async setSimilarityThresholdFunctionRaw(requestParameters: SetSimilarityThresholdFunctionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.experimentId === null || requestParameters.experimentId === undefined) {
            throw new runtime.RequiredError('experimentId','Required parameter requestParameters.experimentId was null or undefined when calling setSimilarityThresholdFunction.');
        }

        if (requestParameters.functionId === null || requestParameters.functionId === undefined) {
            throw new runtime.RequiredError('functionId','Required parameter requestParameters.functionId was null or undefined when calling setSimilarityThresholdFunction.');
        }

        if (requestParameters.similarityThresholdFunction === null || requestParameters.similarityThresholdFunction === undefined) {
            throw new runtime.RequiredError('similarityThresholdFunction','Required parameter requestParameters.similarityThresholdFunction was null or undefined when calling setSimilarityThresholdFunction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/experiments/{experimentId}/similarity-threshold-functions/{functionId}`.replace(`{${"experimentId"}}`, encodeURIComponent(String(requestParameters.experimentId))).replace(`{${"functionId"}}`, encodeURIComponent(String(requestParameters.functionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SimilarityThresholdFunctionValuesToJSON(requestParameters.similarityThresholdFunction),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates or creates a similarity threshold function
     */
    async setSimilarityThresholdFunction(requestParameters: SetSimilarityThresholdFunctionRequest): Promise<void> {
        await this.setSimilarityThresholdFunctionRaw(requestParameters);
    }

}
